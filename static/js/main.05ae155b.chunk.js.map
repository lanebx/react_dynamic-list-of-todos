{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","inputValue","selectValue","handleChange","event","target","name","value","console","log","setState","this","props","todos","onSelectUserID","selectID","className","type","onChange","e","filter","todo","String","completed","title","includes","map","readOnly","checked","userId","onClick","id","React","Component","CurrentUser","user","fetch","then","response","json","prewProps","email","phone","clearUser","App","selectedUserId","selectUser","onClear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05ae155b.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  onSelectUserID(userId: number) : void;\n  selectID: number;\n}\n\ninterface State {\n  inputValue?: string;\n  selectValue?: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    inputValue: '',\n    selectValue: 'all',\n  };\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    console.log(name, value);\n\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { todos, onSelectUserID, selectID } = this.props;\n    const { inputValue, selectValue } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          name=\"inputValue\"\n          className=\"TodoList__input-filter\"\n          value={inputValue}\n          onChange={(e) => {\n            this.handleChange(e);\n          }}\n        />\n\n        <select name=\"selectValue\" onChange={(e) => this.handleChange(e)} value={selectValue}>\n          <option value=\"all\">all</option>\n          <option value=\"false\">active</option>\n          <option value=\"true\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos\n              .filter(todo => {\n                if (selectValue === 'all') {\n                  return true;\n                }\n\n                return String(todo.completed) === selectValue;\n              })\n              .filter(todo => todo.title.includes(this.state.inputValue || ''))\n              .map((todo: Todo) => {\n                return (\n                  <li\n                    key={todo.id}\n                    className={todo.completed\n                      ? 'TodoList__item TodoList__item--checked'\n                      : 'TodoList__item TodoList__item--unchecked'}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly checked={todo.completed} />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={selectID === todo.userId\n                        ? 'TodoList__user-button TodoList__user-button--selected button'\n                        : 'TodoList__user-button button'}\n                      type=\"button\"\n                      onClick={() => {\n                        onSelectUserID(todo.userId);\n                      }}\n                    >\n                      User&nbsp;#\n                      {todo.userId}\n                    </button>\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './CurrentUser.scss';\n\ntype User = {\n  id: number,\n  createdAt: string,\n  updatedAt: string,\n  name: string,\n  username: string,\n  email: string,\n  phone: string,\n  website: string,\n};\n\ninterface Props {\n  userId: number;\n  clearUser(): void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    fetch(`https://mate.academy/students-api/users/${this.props.userId}`)\n      .then(response => response.json())\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prewProps: Props) {\n    if (prewProps.userId !== this.props.userId) {\n      fetch(`https://mate.academy/students-api/users/${this.props.userId}`)\n        .then(response => response.json())\n        .then(user => this.setState({ user }));\n      console.log('add');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {this.state.user?.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {this.state.user?.name}\n        </h3>\n        <p className=\"CurrentUser__email\">{this.state.user?.email}</p>\n        <p className=\"CurrentUser__phone\">{this.state.user?.phone}</p>\n\n        <button className=\"button CurrentUser__button-clear\" type=\"button\" onClick={() => this.props.clearUser()}>\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    fetch('https://mate.academy/students-api/todos')\n      .then(response => response.json())\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  onClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectUserID={this.selectUser}\n            selectID={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.onClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}